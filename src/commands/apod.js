const { MessageEmbed } = require("discord.js");
require("dotenv").config();
const axios = require("axios");
const commandUsage = require("../support/commandUsage");

let apodData = null;
function fetchData() {
  axios
    .get(
      "https://api.nasa.gov/planetary/apod?api_key=" + process.env.NASA_APID_KEY
    )
    .then((res) => {
      if (res.status >= 400) {
        return;
      }
      apodData = res.data;

      console.log("APOD Image fetched (Command)", Date());
    })
    .catch((err) => {
      console.log(err);
    });
}

const showEmbed = (showDescription) => {
  const apodEmbed = new MessageEmbed()
    .setColor("#F0386B")
    .setTitle(apodData.title)
    .setURL(apodData.url)
    .setImage(apodData.url)
    .setTimestamp(apodData.date)
    .setFooter(
      "Generated by astronomia with NASA's APOD API",
      "https://www.nasa.gov/sites/default/files/thumbnails/image/nasa-logo-web-rgb.png"
    );
  if (showDescription) {
    apodEmbed.setDescription(`\`\`\` ${apodData.explanation}\`\`\``);
  }
  return apodEmbed;
};
fetchData();
setInterval(() => {
  fetchData();
}, 3600000);
const name = "apod";
module.exports = {
  name,
  aliases: ["a"],
  description: "Astronomy Picture of Day",
  execute(message, args, client, db) {
    (async () => {
      let msgID = null;
      let msgInstance = null;
      let showDescription = false;

      commandUsage(name, db);
      client.on("messageReactionAdd", async (reaction, user) => {
        if (user.bot) {
          return;
        }
        if (msgID === reaction.message.id) {
          if (reaction._emoji.name === "❔") {
            showDescription = !showDescription;
            msgInstance.edit(showEmbed(showDescription));
          }
        }
      });

      client.on("messageReactionRemove", async (reaction, user) => {
        if (user.bot) {
          return;
        }
        if (msgID === reaction.message.id) {
          if (reaction._emoji.name === "❔") {
            showDescription = !showDescription;
            msgInstance.edit(showEmbed(showDescription));
          }
        }
      });

      message.channel.send(showEmbed(showDescription)).then(async (msg) => {
        msgID = msg.id;
        msgInstance = msg;
        await msg.react("❔");
      });
    })();
  },
};
