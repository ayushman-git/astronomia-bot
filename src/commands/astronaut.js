const name = "astronaut";
const { MessageEmbed, MessageAttachment } = require("discord.js");
const astronauts = require("../assets/astronautsData");
const path = require("path");
const commandUsage = require("../support/commandUsage");
const attachment = new MessageAttachment(
  path.join(__dirname, "../assets/images/logo.png"),
  "logo.png"
);

const listOfAstronauts = (array, offset = 0) => {
  let result = "```glsl\n ";
  for (let i = offset; i < offset + 20; i++) {
    if (i > astronauts.length - 1) {
      result = result + "```";
      return result;
    }
    const listNumber = i + 1;
    result = result + listNumber + " - " + array[i] + "\n";
    if (i === offset + 19) {
      result = result + "```";
    }
  }
  return result;
};

module.exports = {
  name,
  aliases: ["astro", "astronauts", "cosmonaut", "cosmonauts"],
  description: "Check version",
  async execute(message, args, client, db) {
    commandUsage(name, db);

    let msgID = null;
    let msgInstance = null;
    let offset = 0;
    const astronautsNames = astronauts.map((astronaut) => astronaut.name);

    client.on("messageReactionAdd", async (reaction, user) => {
      if (user.bot) {
        return;
      }
      if (msgID === reaction.message.id) {
        if (reaction._emoji.name === "‚ñ∂") {
          offset += 20;
          const astroListEmbed = new MessageEmbed()
            .setColor("#F0386B")
            .setDescription(
              `There are approximately [${astronauts.length}](https://en.wikipedia.org/wiki/List_of_astronauts_by_name) astronauts.`
            )
            .setTitle("üë®‚ÄçüöÄ Astronauts' List")
            .addField("\u200b", listOfAstronauts(astronautsNames, offset))
            .attachFiles(attachment)
            .setFooter("Generated by astronomia", "attachment://logo.png");
          msgInstance.edit(astroListEmbed);
        } else if (reaction._emoji.name === "‚óÄ") {
          if (offset < 20) {
            offset = 0;
            return;
          }
          offset -= 20;
          const astroListEmbed = new MessageEmbed()
            .setColor("#F0386B")
            .setDescription(
              `There are approximately [${astronauts.length}](https://en.wikipedia.org/wiki/List_of_astronauts_by_name) astronauts.`
            )
            .setTitle("üë®‚ÄçüöÄ Astronauts' List")
            .addField("‚Äç\u200b", listOfAstronauts(astronautsNames, offset))
            .attachFiles(attachment)
            .setFooter("Generated by astronomia", "attachment://logo.png");
          msgInstance.edit(astroListEmbed);
        }
      }
    });
    if (args.length === 0) {
      const astroListEmbed = new MessageEmbed()
        .setColor("#F0386B")
        .setDescription(
          `There are approximately [${astronauts.length}](https://en.wikipedia.org/wiki/List_of_astronauts_by_name) astronauts.`
        )
        .setTitle("üë®‚ÄçüöÄ Astronauts' List")
        .addField("\u200b", listOfAstronauts(astronautsNames, offset))
        .attachFiles(attachment)
        .setFooter("Generated by astronomia", "attachment://logo.png");
      message.channel.send(astroListEmbed).then(async (msg) => {
        msgInstance = msg;
        await msg.react("‚óÄ");
        await msg.react("‚ñ∂");
        msgID = msg.id;
      });
    } else {
      const regex = new RegExp(args.join(" "), "i");
      const selectedAstronaut = astronauts.find((astronaut) => {
        if (astronaut.name.match(regex)) {
          return astronaut;
        }
      });
      if (selectedAstronaut) {
        const astroEmbed = new MessageEmbed()
          .setColor("#F0386B")
          .setDescription(`\`\`\` ${selectedAstronaut.bio}\`\`\``)
          .setTitle(selectedAstronaut.name)
          .setURL(selectedAstronaut.wiki)
          .setThumbnail(selectedAstronaut.profile_image_thumbnail)
          .attachFiles(attachment)
          .addFields(
            {
              name: "Status",
              value: selectedAstronaut.status.name,
              inline: true,
            },
            {
              name: "Nationality",
              value: selectedAstronaut.nationality,
              inline: true,
            },
            {
              name: "Date of Birth",
              value: selectedAstronaut.date_of_birth,
              inline: true,
            }
          )
          .setFooter("Generated by astronomia", "attachment://logo.png");
        if (selectedAstronaut.agency) {
          astroEmbed.addFields({
            name: "Agency",
            value: selectedAstronaut.agency.name,
            inline: true,
          });
        }
        if (selectedAstronaut.first_flight) {
          astroEmbed.addField(
            "First Flight",
            `${new Date(selectedAstronaut.first_flight).toLocaleDateString(
              "en-UK",
              {
                weekday: "short",
                year: "numeric",
                month: "long",
                day: "numeric",
              }
            )}`,
            true
          );
        }
        if (selectedAstronaut.last_flight) {
          astroEmbed.addField(
            "Last Flight",
            `${new Date(selectedAstronaut.last_flight).toLocaleDateString(
              "en-UK",
              {
                weekday: "short",
                year: "numeric",
                month: "long",
                day: "numeric",
              }
            )}`,
            true
          );
        }
        if (selectedAstronaut.wiki) {
          astroEmbed
            .addField("\u200b", "\u200b")
            .addField("\u200b", `[Wiki](${selectedAstronaut.wiki})`, true);
        }
        if (selectedAstronaut.twitter) {
          astroEmbed.addField(
            "\u200b",
            `[Twitter](${selectedAstronaut.twitter})`,
            true
          );
        }
        if (selectedAstronaut.instagram) {
          astroEmbed.addField(
            "\u200b",
            `[Instagram](${selectedAstronaut.instagram})`,
            true
          );
        }
        message.channel.send(astroEmbed);
      } else {
        message.channel.send("Please enter a valid name.");
      }
    }
  },
};
